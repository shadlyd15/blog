I"øN<h1 id="doomlinux">DoomLinux</h1>
<p>A single script to build a minimal live Linux operating system from source code that runs Doom on boot.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>./DoomLinux.sh
</pre></td></tr></tbody></table></code></pre></div></div>
<p>This command will create a bootable iso of DoomLinux which is bootable from USB stick.</p>

<h2 id="what-it-does">What it does</h2>
<ul>
  <li>Downloads Linux Kernel 5.4.3 source and compiles it with a minimal configuration</li>
  <li>Downloads Busybox 1.35.0 source and compiles it statically.</li>
  <li>Downloads FBDoom and compiles it statically.</li>
  <li>Creates rootfs for linux kernel.</li>
  <li>Generates grub configuration</li>
  <li>Creates a bootable live Linux iso that runs Doom on boot.</li>
</ul>

<h2 id="build-dependencies">Build Dependencies</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">sudo </span>apt <span class="nb">install </span>wget make gawk gcc bc bison flex xorriso libelf-dev libssl-dev grub-common
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="explanation">Explanation</h2>
<h3 id="creating-folders-and-downloading-the-source-codes">Creating folders and downloading the source codes</h3>

<p>We need to create some folders for managing the codes</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nb">mkdir</span> <span class="nt">-p</span> rootfs
<span class="nb">mkdir</span> <span class="nt">-p</span> staging
<span class="nb">mkdir</span> <span class="nt">-p</span> iso/boot
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>rootfs - It is the root file system of DoomLinux.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  rootfs
  â”œâ”€â”€ bin (Busybox and fbdoom binaries)
  â”œâ”€â”€ dev (All the available devices)
  â”œâ”€â”€ mnt (Mount point for temporary external media)
  â”œâ”€â”€ proc (Different information of currently running kernel)
  â”œâ”€â”€ sys (Directory for virtual filesystem)
  â””â”€â”€ tmp (Directory for temporary files required during runtime)
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>staging - Here all the source codes are downloaded and compiled.</li>
  <li>iso - It is the folder structure for grub to make a bootable iso. In boot folder we will place grub.cfg
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  iso
  â””â”€â”€ boot
      â”œâ”€â”€ bzImage (Compiled Linux Kernel)
      â”œâ”€â”€ grub
      â”‚   â””â”€â”€ grub.cfg (Grub Configuration)
      â”œâ”€â”€ rootfs.gz (Compressed root file system)
      â””â”€â”€ System.map (System map that is compiled with kernel)
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>Setting variables to make things easy
```bash
KERNEL_VERSION=5.4.3
BUSYBOX_VERSION=1.35.0</p>
  </li>
</ul>

<p>SOURCE_DIR=$PWD
ROOTFS=$SOURCE_DIR/rootfs
STAGING=$SOURCE_DIR/staging
ISO_DIR=$SOURCE_DIR/iso</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre>We need to download the required source codes in staging folder and extract them.
- Linux kernel 5.4.3
- Busybox 1.35.0 - For creating minimum shell environment. 
- FBDoom - A port of Doom original source code for Linux framebuffer.
- Doom shareware - The shareware version of Doom. You can use other versions if you want.

```bash
cd $STAGING
wget -nc -O kernel.tar.xz http://kernel.org/pub/linux/kernel/v5.x/linux-${KERNEL_VERSION}.tar.xz
wget -nc -O busybox.tar.bz2 http://busybox.net/downloads/busybox-${BUSYBOX_VERSION}.tar.bz2
wget -nc -O fbDOOM-master.zip https://github.com/maximevince/fbDOOM/archive/refs/heads/master.zip
wget -nc -O doom1.wad https://distro.ibiblio.org/slitaz/sources/packages/d/doom1.wad

tar -xvf kernel.tar.xz
tar -xvf busybox.tar.bz2
unzip fbDOOM-master.zip
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="configuring-the-kernel-and-compile-it">Configuring the kernel and compile it</h3>
<p>Change directory to kernel source.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$STAGING</span>
<span class="nb">cd </span>linux-<span class="k">${</span><span class="nv">KERNEL_VERSION</span><span class="k">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Creating a config file for kernel.
You can use either of the following</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> defconfig <span class="c"># Creates a ".config" file with default options from current architecture</span>
make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> menuconfig <span class="c"># Menu-driven user interface for configuring kernel</span>
make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> xconfig <span class="c"># GUI based user interface for configuring kernel</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>-j$(nproc) flag sets the number of jobs to the number of CPU cores/threads available. It make things compile faster.</p>

<p>Now we will make a couple of changes in the .config file to make our kernel size smaller. It will also reduce the compile time.</p>

<p>Use xz kernel compression instead of gzip</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*# CONFIG_KERNEL_XZ is not set.*|CONFIG_KERNEL_XZ=y|"</span> .config
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_KERNEL_GZIP=y.*|# CONFIG_KERNEL_GZIP is not set|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Disable sound drivers.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_SOUND=y.*|# CONFIG_SOUND is not set|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Disable network drivers.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_NET=y.*|# CONFIG_NET is not set|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Disable EFI stubs.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_EFI=y.*|# CONFIG_EFI is not set|"</span> .config 
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_EFI_STUB=y.*|# CONFIG_EFI_STUB is not set|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Disable kernel debug.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/^CONFIG_DEBUG_KERNEL.*/</span><span class="se">\\</span><span class="s2"># CONFIG_DEBUG_KERNEL is not set/"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Optimize for size.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y.*|# CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE is not set|"</span> .config
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set.*|CONFIG_CC_OPTIMIZE_FOR_SIZE=y|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Change host name</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_DEFAULT_HOSTNAME=*|CONFIG_DEFAULT_HOSTNAME=</span><span class="se">\"</span><span class="s2">DoomLinux</span><span class="se">\"</span><span class="s2">|"</span> .config
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now compile the kernel and copy the binaries.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> bzImage
<span class="nb">cp arch</span>/x86/boot/bzImage <span class="nv">$SOURCE_DIR</span>/iso/boot/bzImage
<span class="nb">cp </span>System.map <span class="nv">$SOURCE_DIR</span>/iso/boot/System.map
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="configuring-busybox-and-compile-it">Configuring busybox and compile it</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span>  <span class="nv">$STAGING</span>
<span class="nb">cd </span>busybox-<span class="k">${</span><span class="nv">BUSYBOX_VERSION</span><span class="k">}</span>
make defconfig
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|.*CONFIG_STATIC.*|CONFIG_STATIC=y|"</span> .config
make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span> busybox <span class="nb">install
cd </span>_install
<span class="nb">cp</span> <span class="nt">-r</span> ./ <span class="nv">$ROOTFS</span>/
<span class="nb">cd</span> <span class="nv">$ROOTFS</span>
<span class="nb">rm</span> <span class="nt">-f</span> linuxrc
</pre></td></tr></tbody></table></code></pre></div></div>
<p>These commands will statically compile busybox. The default installation folder for busybox is _install. We will copy the compiled binaries from there to our rootfs.</p>
<h3 id="compile-fbdoom-statically">Compile FBDoom statically</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$STAGING</span>
<span class="nb">cd </span>fbDOOM-master/fbdoom
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s|CFLAGS+=-ggdb3 -Os|CFLAGS+=-ggdb3 -Os -static|"</span> Makefile
make <span class="nt">-j</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span>
<span class="nb">cp </span>fbdoom <span class="nv">$ROOTFS</span>/bin/fbdoom
<span class="nb">cp</span> <span class="nv">$STAGING</span>/doom1.wad <span class="nv">$ROOTFS</span>/bin/doom1.wad
</pre></td></tr></tbody></table></code></pre></div></div>
<p>We need to statically compile FBDoom to work it in our system with minimal dependencies. The above commands will do that for us and it will also copy the doom1.wad in our root folder.</p>
<h3 id="archive-rootfs">Archive rootfs</h3>
<p>We will create additional folders so that Linux kernel can use them on runtime.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$ROOTFS</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> dev proc sys mnt tmp
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Now we will create a init file for our kernel.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'#!/bin/sh'</span> <span class="o">&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Suppress all messages from the kernel except panic messages.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'dmesg -n 1'</span> <span class="o">&gt;&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Mount dev folder to devtmpfs</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'mount -t devtmpfs none /dev'</span> <span class="o">&gt;&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Mount proc folder to proc</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'mount -t proc none /proc'</span> <span class="o">&gt;&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Mount sys folder to sysfs</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'mount -t sysfs none /sys'</span> <span class="o">&gt;&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Run doom right after booting the kernel. After that we will run busybox with cttyhack to stop kernel panic if we want to exit busybox. It will open another shell instead.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">echo</span> <span class="s1">'fbdoom -iwad /bin/doom1.wad'</span> <span class="o">&gt;&gt;</span> init
<span class="nb">echo</span> <span class="s1">'setsid cttyhack /bin/sh'</span> <span class="o">&gt;&gt;</span> init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>We must have to make the init file executable.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nb">chmod</span> +x init
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Now archive the rootfs with cpio.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$ROOTFS</span>
find <span class="nb">.</span> | cpio <span class="nt">-R</span> root:root <span class="nt">-H</span> newc <span class="nt">-o</span> | <span class="nb">gzip</span> <span class="o">&gt;</span> <span class="nv">$SOURCE_DIR</span>/iso/boot/rootfs.gz
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="using-grub-bootloader-to-boot-doomlinux">Using GRUB bootloader to boot DoomLinux</h3>
<p>Create a grub configuration file in iso/boot directory.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$SOURCE_DIR</span>/iso/boot
<span class="nb">mkdir</span> <span class="nt">-p</span> grub
<span class="nb">cd </span>grub
<span class="nb">cat</span> <span class="o">&gt;</span> grub.cfg <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
set default=0
set timeout=30

# Menu Colours
set menu_color_normal=white/black
set menu_color_highlight=white/green

root (hd0,0)

menuentry "DoomLinux" {      
  linux  /boot/bzImage
  initrd /boot/rootfs.gz
}
</span><span class="no">EOF
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>These are the location of our compiled kernel and archived rootfs.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  linux  /boot/bzImage
  initrd /boot/rootfs.gz
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Finally create DoomLinux bootable iso</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nb">cd</span> <span class="nv">$SOURCE_DIR</span>
grub-mkrescue <span class="nt">--compress</span><span class="o">=</span>xz <span class="nt">-o</span> DoomLinux.iso iso
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="acknowledgements">Acknowledgements</h2>
<ul>
  <li><a href="https://www.youtube.com/watch?v=asnXWOUKhTA">Write your own Operating System</a></li>
  <li><a href="https://github.com/ivandavidov/minimal-linux-script">Minimal linux script</a></li>
</ul>
:ET